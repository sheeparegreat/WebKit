# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if USE(CF)

webkit_platform_headers: "CoreIPCSecTrust.h"

#if HAVE(WK_SECURE_CODING_SECTRUST)

header: "CoreIPCSecTrust.h"
[CustomHeader, WebKitPlatform, AdditionalEncoder=StreamConnectionEncoder] enum class WebKit::CoreIPCSecTrustResult : uint8_t {
    Invalid,
    Proceed,
    Confirm,
    Deny,
    Unspecified,
    RecoverableTrustFailure,
    FatalTrustFailure,
    OtherError
};

using WebKit::CoreIPCSecTrustData::Detail = Vector<std::pair<WebKit::CoreIPCString, bool>>;
using WebKit::CoreIPCSecTrustData::InfoOption = Variant<WebKit::CoreIPCDate, WebKit::CoreIPCString, bool>;
using WebKit::CoreIPCSecTrustData::InfoType = Vector<std::pair<WebKit::CoreIPCString, WebKit::CoreIPCSecTrustData::InfoOption>>;
using WebKit::CoreIPCSecTrustData::PolicyDictionaryValueIsNumber = Vector<std::pair<WebKit::CoreIPCString, WebKit::CoreIPCNumber>>;
using WebKit::CoreIPCSecTrustData::PolicyArrayOfArrayContainingDateOrNumbers = Vector<Vector<Variant<WebKit::CoreIPCNumber, WebKit::CoreIPCDate>>>;
using WebKit::CoreIPCSecTrustData::PolicyArrayOfNumbers = Vector<WebKit::CoreIPCNumber>;
using WebKit::CoreIPCSecTrustData::PolicyArrayOfStrings = Vector<WebKit::CoreIPCString>;
using WebKit::CoreIPCSecTrustData::PolicyArrayOfData = Vector<SecTrustOpaqueData>;
using WebKit::CoreIPCSecTrustData::PolicyVariant = Variant<bool, WebKit::CoreIPCString, WebKit::CoreIPCSecTrustData::PolicyArrayOfNumbers, WebKit::CoreIPCSecTrustData::PolicyArrayOfStrings, WebKit::CoreIPCSecTrustData::PolicyArrayOfData, WebKit::CoreIPCSecTrustData::PolicyArrayOfArrayContainingDateOrNumbers, WebKit::CoreIPCSecTrustData::PolicyDictionaryValueIsNumber>;
using WebKit::CoreIPCSecTrustData::PolicyOption = Vector<std::pair<WebKit::CoreIPCString, WebKit::CoreIPCSecTrustData::PolicyVariant>>;
using WebKit::CoreIPCSecTrustData::PolicyValue = Variant<WebKit::CoreIPCString, WebKit::CoreIPCSecTrustData::PolicyOption>
using WebKit::CoreIPCSecTrustData::PolicyType = Vector<std::pair<WebKit::CoreIPCString, WebKit::CoreIPCSecTrustData::PolicyValue>>;
using WebKit::CoreIPCSecTrustData::ExceptionType = Vector<std::pair<WebKit::CoreIPCString, Variant<WebKit::CoreIPCNumber, SecTrustOpaqueData, bool>>>;

header: "CoreIPCSecTrust.h"
[CustomHeader, WebKitPlatform, AdditionalEncoder=StreamConnectionEncoder] struct WebKit::CoreIPCSecTrustData {
    WebKit::CoreIPCSecTrustResult result;
    bool anchorsOnly;
    bool keychainsAllowed;
    Vector<SecTrustOpaqueData> certificates;
    Vector<SecTrustOpaqueData> chain;
    Vector<WebKit::CoreIPCSecTrustData::Detail> details;
    Vector<WebKit::CoreIPCSecTrustData::PolicyType> policies;
    std::optional<WebKit::CoreIPCSecTrustData::InfoType> info;
    std::optional<WebKit::CoreIPCDate> verifyDate;
    std::optional<Vector<SecTrustOpaqueData>> responses;
    std::optional<Vector<SecTrustOpaqueData>> scts;
    std::optional<Vector<SecTrustOpaqueData>> anchors;
    std::optional<Vector<SecTrustOpaqueData>> trustedLogs;
    std::optional<Vector<WebKit::CoreIPCSecTrustData::ExceptionType>> exceptions;
};

[WebKitPlatform, AdditionalEncoder=StreamConnectionEncoder] class WebKit::CoreIPCSecTrust {
    std::optional<WebKit::CoreIPCSecTrustData> m_data;
}
#endif
#if !HAVE(WK_SECURE_CODING_SECTRUST)
[WebKitPlatform, AdditionalEncoder=StreamConnectionEncoder] class WebKit::CoreIPCSecTrust {
    CoreIPCSecTrustOpaqueData dataReference();
}
#endif

#endif // USE(CF)
