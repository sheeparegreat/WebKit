# Copyright (C) 2014 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if ENABLE(VIDEO_PRESENTATION_MODE)
[
    DispatchedFrom=UI,
    DispatchedTo=WebContent
]
messages -> VideoPresentationManager {
    RequestFullscreenMode(WebCore::MediaPlayerClientIdentifier contextId, uint32_t videoFullscreenMode, bool finishedWithMedia)
    RequestUpdateInlineRect(WebCore::MediaPlayerClientIdentifier contextId)
    RequestVideoContentLayer(WebCore::MediaPlayerClientIdentifier contextId)
    ReturnVideoContentLayer(WebCore::MediaPlayerClientIdentifier contextId)
#if !PLATFORM(IOS_FAMILY)
    DidSetupFullscreen(WebCore::MediaPlayerClientIdentifier contextId)
#endif
    WillExitFullscreen(WebCore::MediaPlayerClientIdentifier contextId)
    DidExitFullscreen(WebCore::MediaPlayerClientIdentifier contextId)
    DidEnterFullscreen(WebCore::MediaPlayerClientIdentifier contextId, std::optional<WebCore::FloatSize> size)
    FailedToEnterFullscreen(WebCore::MediaPlayerClientIdentifier contextId)
    DidCleanupFullscreen(WebCore::MediaPlayerClientIdentifier contextId)
#if ENABLE(LINEAR_MEDIA_PLAYER)
    DidEnterExternalPlayback(WebCore::MediaPlayerClientIdentifier contextId)
    DidExitExternalPlayback(WebCore::MediaPlayerClientIdentifier contextId)
#endif
    SetVideoLayerFrameFenced(WebCore::MediaPlayerClientIdentifier contextId, WebCore::FloatRect bounds, VideoPresentationManagerMachSendRightAnnotated sendRightAnnotated)
    SetVideoLayerGravityEnum(WebCore::MediaPlayerClientIdentifier contextId, unsigned gravity)
    SetVideoFullscreenFrame(WebCore::MediaPlayerClientIdentifier contextId, WebCore::FloatRect frame)
    FullscreenModeChanged(WebCore::MediaPlayerClientIdentifier contextId, uint32_t videoFullscreenMode)
    FullscreenMayReturnToInline(WebCore::MediaPlayerClientIdentifier contextId, bool isPageVisible)
    RequestRouteSharingPolicyAndContextUID(WebCore::MediaPlayerClientIdentifier contextId) -> (enum:uint8_t WebCore::RouteSharingPolicy routeSharingPolicy, String routingContextUID)
    EnsureUpdatedVideoDimensions(WebCore::MediaPlayerClientIdentifier contextId, WebCore::FloatSize existingVideoDimensions)
    SetRequiresTextTrackRepresentation(WebCore::MediaPlayerClientIdentifier contextId, bool requiresTextTrackRepresentation)
    SetTextTrackRepresentationBounds(WebCore::MediaPlayerClientIdentifier contextId, WebCore::IntRect bounds)
}
#endif
